#!/usr/bin/env ruby

$usage = %Q{
 Synopsis

 deployaml: deploys your project using the details from a deplo.yml file in the current directory

 Usage

 deployaml [OPTION]

 -h, --help
    show help and exit

 -v VERSION, --version=VERSION
    deploy a given version of the code (such as a tag)

 -t, --tasks
    list available pre and post install tasks and exit

 -s, --scms
    list available source control systems and exit

 -d, --deployments
    lists the deployments from your deplo.yml file and exit

 -I DIRECTORY, --include=DIRECTORY
    path containing custom pre/post install tasks and source control handling
}

$:.unshift(File.dirname(__FILE__) + '/../lib') unless $:.include?(File.dirname(__FILE__) + '/../lib')

require 'getoptlong'
require 'deployaml'


def list_tasks deployaml
  %w{    pre_install post_install    }.each do |thingy|
    puts "All #{thingy}:"
    deployaml.send('all_' + thingy).each do |elem|
      puts "\t#{elem}"
    end
    puts "\n"
  end

  exit(0)
end

def list_scms deployaml
  puts "All scms:"
  deployaml.all_scms.each do |elem|
    puts "\t#{elem}"
  end
  puts "\n"

  exit(0)
end

def list_deployments deployaml
  puts "Available deployments:"
  deployaml.available_deployments.each do |deployment|
    puts "\t#{deployment}"
  end
  puts "\n"

  exit(0)
end

def show_usage
  puts $usage
  exit(0)
end

def include_path_from_options(opts)
  include_path = nil

  remaining_options = []
  opts.each do |opt, arg|
    case opt
      when '--include'
        include_path = arg
      else
        remaining_options << [opt, arg]
    end
  end

  return include_path, remaining_options
end

include_path, opts = include_path_from_options(
        GetoptLong.new(
                ['--help', '-h', GetoptLong::NO_ARGUMENT],
                ['--tasks', '-l', GetoptLong::NO_ARGUMENT],
                ['--scms', '-s', GetoptLong::NO_ARGUMENT],
                ['--deployments', '-d', GetoptLong::NO_ARGUMENT],
                ['--version', '-v', GetoptLong::REQUIRED_ARGUMENT],
                ['--include', '-I', GetoptLong::REQUIRED_ARGUMENT]
        )
)

deployaml = Deployaml::Runner.new(include_path ? {:include => include_path} : {})
version = nil

opts.each do |opt, arg|
  case opt
    when '--help'
      show_usage
    when '--tasks'
      list_tasks(deployaml)
    when '--scms'
      list_scms(deployaml)
    when '--deployments'
      list_deployments(deployaml)
    when '--version'
      version = arg
  end
end

deployaml.go!(:version => version)

